{"ast":null,"code":"var _jsxFileName = \"/Users/oss/Desktop/Pet_project/snake/src/App.js\";\nimport React, { Component } from 'react';\nimport { Grid, Button, Typography } from '@material-ui/core';\nimport './App.css';\nimport Food from './Food';\nimport Snake from './Snake';\nimport Trap from './Trap';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 100,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]],\n  play: false,\n  trap: getRandomCoordinates()\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      if (this.state.direction === 'UP') {\n        switch (e.keyCode) {\n          case 37:\n            this.setState({\n              direction: 'LEFT'\n            });\n            break;\n\n          case 39:\n            this.setState({\n              direction: 'RIGHT'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.state.direction === 'DOWN') {\n        switch (e.keyCode) {\n          case 37:\n            this.setState({\n              direction: 'LEFT'\n            });\n            break;\n\n          case 39:\n            this.setState({\n              direction: 'RIGHT'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.state.direction === 'LEFT') {\n        switch (e.keyCode) {\n          case 38:\n            this.setState({\n              direction: 'UP'\n            });\n            break;\n\n          case 40:\n            this.setState({\n              direction: 'DOWN'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.state.direction === 'RIGHT') {\n        switch (e.keyCode) {\n          case 38:\n            this.setState({\n              direction: 'UP'\n            });\n            break;\n\n          case 40:\n            this.setState({\n              direction: 'DOWN'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          });\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          });\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          });\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.ButtonPlay = () => {\n      if (!this.state.play) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, React.createElement(Button, {\n          onClick: this.ToggleChangeMode.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, \" Play \"));\n      }\n\n      ;\n    };\n\n    if (this.state.play) setInterval(this.moveSnake, this.state.speed);\n  }\n\n  componentDidMount() {\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] == 100 || head[1] == 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.map(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) this.onGameOver();\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 20) {\n      this.setState({\n        speed: this.state.speed - 20\n      });\n\n      if (this.state.snakeDots.length - 2 === 10) {\n        setInterval(this.moveSnake, this.state.speed);\n        setInterval(this.moveSnake, this.state.speed);\n      }\n    } else {\n      this.setState({\n        speed: this.state.speed - 2\n      });\n    }\n  }\n\n  onGameOver() {\n    window.location.reload(false);\n  }\n\n  ToggleChangeMode() {\n    this.setState({\n      play: true\n    });\n    var move = setInterval(this.moveSnake, this.state.speed);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      xs: 6,\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(Food, {\n      dot: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(Trap, {\n      trap: this.state.trap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      xs: 6,\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      component: \"h5\",\n      className: \"fontScore\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Score : \", this.state.snakeDots.length - 2))), this.ButtonPlay());\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/oss/Desktop/Pet_project/snake/src/App.js"],"names":["React","Component","Grid","Button","Typography","Food","Snake","Trap","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","play","trap","App","constructor","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","ButtonPlay","ToggleChangeMode","bind","setInterval","componentDidMount","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","map","dot","enlargeSnake","increaseSpeed","newSnake","unshift","location","reload","move","render"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport {Grid, Button, Typography} from '@material-ui/core';\nimport './App.css';\nimport Food from'./Food';\nimport Snake from './Snake';\nimport Trap from './Trap';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 100,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ],\n  play : false,\n  trap : getRandomCoordinates(),\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    if(this.state.play)\n       setInterval(this.moveSnake,this.state.speed)\n  }\n  state = initialState;\n  componentDidMount() {\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    if(this.state.direction === 'UP')\n      {\n        switch (e.keyCode) {\n        case 37:\n          this.setState({direction: 'LEFT'});\n          break;\n        case 39:\n          this.setState({direction: 'RIGHT'});\n          break;\n        default:\n          break;\n      }\n    }\n  if(this.state.direction === 'DOWN')\n    {\n      switch (e.keyCode) {\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n      default:\n        break;\n    }\n  }\n  if(this.state.direction === 'LEFT')\n    {\n      switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      default:\n        break;\n    }\n  }\n  if(this.state.direction === 'RIGHT')\n    {\n      switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      default:\n        break;\n    }\n  }\n    }\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          })\n          break;\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          })\n          break;\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          })\n          break;\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          dots.push(head);\n          dots.shift();\n          this.setState({\n            snakeDots: dots\n          })\n          break;\n        default:\n          break;\n        }\n\n  }\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] == 100 || head[1] == 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.map(dot =>{\n      if(head[0]===dot[0] && head[1]===dot[1])\n        this.onGameOver();\n    })\n  }\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n  increaseSpeed() {\n    if (this.state.speed > 20) {\n      this.setState({\n        speed: this.state.speed - 20\n      })\n    if(this.state.snakeDots.length -2 === 10)\n      {\n      setInterval(this.moveSnake, this.state.speed);\n      setInterval(this.moveSnake, this.state.speed);\n      }\n    }\n    else{\n      this.setState({\n        speed: this.state.speed - 2\n      })\n    }\n  }\n  onGameOver() {\n      window.location.reload(false);\n    }\n  ToggleChangeMode(){\n    this.setState({play : true});\n    var move = setInterval(this.moveSnake, this.state.speed)\n  }\n   ButtonPlay = () => {\n    if(!this.state.play){\n    return(\n      <div>\n        <Button onClick={this.ToggleChangeMode.bind(this)} > Play </Button>\n      </div>\n    );\n  };\n  }\n  render(){\n    return (\n      <div>\n        <Grid container >\n          <Grid xs={6} item>\n            <div className=\"game-area\">\n              <Snake snakeDots={this.state.snakeDots}/>\n              <Food dot={this.state.food}/>\n              <Trap trap={this.state.trap} />\n            </div>\n          </Grid>\n          <Grid xs={6} item>\n            <Typography variant=\"h5\" component=\"h5\" className='fontScore'>\n              Score : {this.state.snakeDots.length -2 }\n            </Typography>\n          </Grid>\n        </Grid>\n        {this.ButtonPlay()}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}