{"ast":null,"code":"var _jsxFileName = \"/Users/oss/Desktop/Pet_project/snake/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Food from './Food';\nimport Snake from './Snake';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 100,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]],\n  play: false\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      if (this.state.direction === 'UP') {\n        switch (e.keyCode) {\n          case 38:\n            this.setState({\n              direction: 'UP'\n            });\n            break;\n\n          case 37:\n            this.setState({\n              direction: 'LEFT'\n            });\n            break;\n\n          case 39:\n            this.setState({\n              direction: 'RIGHT'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.state.direction === 'DOWN') {\n        switch (e.keyCode) {\n          case 40:\n            this.setState({\n              direction: 'DOWN'\n            });\n            break;\n\n          case 37:\n            this.setState({\n              direction: 'LEFT'\n            });\n            break;\n\n          case 39:\n            this.setState({\n              direction: 'RIGHT'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.state.direction === 'LEFT') {\n        switch (e.keyCode) {\n          case 38:\n            this.setState({\n              direction: 'UP'\n            });\n            break;\n\n          case 40:\n            this.setState({\n              direction: 'DOWN'\n            });\n            break;\n\n          case 37:\n            this.setState({\n              direction: 'LEFT'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (this.state.direction === 'RIGHT') {\n        switch (e.keyCode) {\n          case 38:\n            this.setState({\n              direction: 'UP'\n            });\n            break;\n\n          case 40:\n            this.setState({\n              direction: 'DOWN'\n            });\n            break;\n\n          case 39:\n            this.setState({\n              direction: 'RIGHT'\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        default:\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n\n      if (this.state.play === false) {\n        this.setState({\n          snakeDots: dots\n        });\n      }\n    };\n\n    this.ButtonPlay = () => {\n      if (!this.state.play) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: this.ToggleChangeMode.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, \" Play \"));\n      }\n\n      ;\n    };\n  }\n\n  componentDidMount() {\n    document.onkeydown = this.onKeyDown;\n    this.onGameOver();\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 20) {\n      this.setState({\n        speed: this.state.speed - 20\n      });\n    }\n  }\n\n  onGameOver() {\n    this.setState(initialState);\n  }\n\n  ToggleChangeMode() {\n    this.setState({\n      play: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Food, {\n      dot: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), this.ButtonPlay());\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/oss/Desktop/Pet_project/snake/src/App.js"],"names":["React","Component","Food","Snake","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","play","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","ButtonPlay","ToggleChangeMode","bind","componentDidMount","document","onkeydown","onGameOver","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","render"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\nimport Food from'./Food';\nimport Snake from './Snake';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 100,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ],\n  play : false,\n}\n\nclass App extends Component {\n  state = initialState;\n  componentDidMount() {\n    document.onkeydown = this.onKeyDown;\n    this.onGameOver()\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    if(this.state.direction === 'UP')\n      {\n        switch (e.keyCode) {\n        case 38:\n          this.setState({direction: 'UP'});\n          break;\n        case 37:\n          this.setState({direction: 'LEFT'});\n          break;\n        case 39:\n          this.setState({direction: 'RIGHT'});\n          break;\n        default:\n          break;\n      }\n    }\n  if(this.state.direction === 'DOWN')\n    {\n      switch (e.keyCode) {\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n      default:\n        break;\n    }\n  }\n  if(this.state.direction === 'LEFT')\n    {\n      switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      default:\n        break;\n    }\n  }\n  if(this.state.direction === 'RIGHT')\n    {\n      switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n      default:\n        break;\n    }\n  }\n    }\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n        default:\n          break;\n        }\n    dots.push(head);\n    dots.shift();\n    if(this.state.play === false)\n    {\n      this.setState({\n        snakeDots: dots\n      })\n  }\n  }\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n  increaseSpeed() {\n    if (this.state.speed > 20) {\n      this.setState({\n        speed: this.state.speed - 20\n      })\n    }\n  }\n  onGameOver() {\n    this.setState(initialState);\n    }\n  ToggleChangeMode(){\n    this.setState({play : true});\n  }\n   ButtonPlay = () => {\n    if(!this.state.play){\n    return(\n      <div>\n        <button onClick={this.ToggleChangeMode.bind(this)} > Play </button>\n      </div>\n    );\n  };\n  }\n  render(){\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food}/>\n        </div>\n        {this.ButtonPlay()}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}